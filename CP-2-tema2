import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import minimize
from scipy.stats import norm

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
plt.style.use('seaborn-v0_8')
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['figure.figsize'] = (14, 10)

print("=" * 80)
print("–ü–†–ê–ö–¢–ò–ö–û-–û–†–Ü–Ñ–ù–¢–û–í–ê–ù–ï –ó–ê–í–î–ê–ù–ù–Ø: –†–ï–ì–†–ï–°–Ü–Ø –ö–û–ö–°–ê")
print("–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∏–∂–∏–≤–∞–Ω–Ω—è –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ —Ä–∏–∑–∏–∫—É –≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")
print("=" * 80)

# 1. –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–ï–¢–ê–õ–¨–ù–ò–• –î–ê–ù–ò–• –ü–†–û –°–¢–£–î–ï–ù–¢–Ü–í
print("\n1. –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–ï–¢–ê–õ–¨–ù–ò–• –î–ê–ù–ò–• –ü–†–û 400 –°–¢–£–î–ï–ù–¢–Ü–í...")

np.random.seed(42)
n_students = 400

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
data = pd.DataFrame({
    '—Å—Ç—É–¥–µ–Ω—Ç_id': range(1, n_students + 1),
    '–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è': np.clip(np.random.normal(14, 4, n_students), 5, 25),
    '–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å': np.clip(np.random.normal(80, 12, n_students), 40, 100),
    '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': np.clip(np.random.normal(6.5, 1.8, n_students), 2, 10),
    '–º–æ—Ç–∏–≤–∞—Ü—ñ—è': np.clip(np.random.normal(7.2, 1.5, n_students), 3, 10),
    '–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–±–∞–ª': np.clip(np.random.normal(72, 8, n_students), 50, 95),
    '–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫—É—Ä—Å—ñ–≤': np.random.poisson(5, n_students) + 3
})

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏
data['–º–æ—Ç–∏–≤–∞—Ü—ñ—è'] = data['–º–æ—Ç–∏–≤–∞—Ü—ñ—è'] + 0.3 * (data['–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å'] - 80) / 12
data['–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'] = data['–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'] + 0.2 * (data['–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è'] - 14) / 4

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∞—Å—É –¥–æ –ø–æ–¥—ñ—ó –∑ —Å–∫–ª–∞–¥–Ω–∏–º–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
base_time = np.random.weibull(1.5, n_students) * 180 + 60

# –°–∫–ª–∞–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
risk_factors = (
        -1.2 * (data['–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è'] - 14) / 4 +  # –°–∏–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        -0.9 * (data['–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å'] - 80) / 12 +  # –°–∏–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        -0.6 * (data['–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'] - 6.5) / 1.8 +  # –ü–æ–º—ñ—Ä–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        -0.7 * (data['–º–æ—Ç–∏–≤–∞—Ü—ñ—è'] - 7.2) / 1.5 +  # –ü–æ–º—ñ—Ä–Ω–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        -0.4 * (data['–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–±–∞–ª'] - 72) / 8 +  # –°–ª–∞–±–∫–∏–π –∑–∞—Ö–∏—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç
        0.3 * (data['–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫—É—Ä—Å—ñ–≤'] - 5) / 2  # –°–ª–∞–±–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä —Ä–∏–∑–∏–∫—É (–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
)

data['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è'] = np.clip(base_time * np.exp(risk_factors), 30, 500)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ–π –∑ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—é –≤—ñ–¥ —Ä–∏–∑–∏–∫—É
event_prob = 1 / (1 + np.exp(-risk_factors * 0.5))
data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'] = np.random.binomial(1, event_prob)

print("üìä –û–°–ù–û–í–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–ù–ò–•:")
print("-" * 50)
print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {n_students}")
print(f"–í—ñ–¥—Å—ñ—á–µ–Ω—å: {data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'].sum()} ({data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'].mean() * 100:.1f}%)")
print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è: {data['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è'].mean():.1f} ¬± {data['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è'].std():.1f} –¥–Ω—ñ–≤")
print(f"–ú–µ–¥—ñ–∞–Ω–Ω–∏–π —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è: {data['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è'].median():.1f} –¥–Ω—ñ–≤")

print("\nüìà –û–ü–ò–°–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ú–Ü–ù–ù–ò–•:")
print(data[['–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è', '–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å', '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–º–æ—Ç–∏–≤–∞—Ü—ñ—è', '–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–±–∞–ª']].describe().round(2))

# 2. –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ê–ù–ê–õ–Ü–ó –î–ê–ù–ò–•
print("\n" + "=" * 80)
print("2. –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ê–ù–ê–õ–Ü–ó –î–ê–ù–ò–• –¢–ê –ö–û–†–ï–õ–Ø–¶–Ü–á")
print("=" * 80)

# –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è
corr_matrix = data[['–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è', '–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å', '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–º–æ—Ç–∏–≤–∞—Ü—ñ—è',
                    '–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–±–∞–ª', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫—É—Ä—Å—ñ–≤', '–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è']].corr()

plt.figure(figsize=(12, 10))
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='coolwarm', center=0,
            square=True, fmt='.2f', cbar_kws={"shrink": .8})
plt.title('–ú–ê–¢–†–ò–¶–Ø –ö–û–†–ï–õ–Ø–¶–Ü–ô –ú–Ü–ñ –ó–ú–Ü–ù–ù–ò–ú–ò', fontsize=16, fontweight='bold', pad=20)
plt.tight_layout()
plt.show()

# 3. –†–ï–ê–õ–Ü–ó–ê–¶–Ü–Ø –ú–û–î–ï–õ–Ü –ö–û–ö–°–ê
print("\n" + "=" * 80)
print("3. –ü–û–ë–£–î–û–í–ê –ú–û–î–ï–õ–Ü –ü–†–û–ü–û–†–¶–Ü–ô–ù–ò–• –†–ò–ó–ò–ö–Ü–í –ö–û–ö–°–ê")
print("=" * 80)


def cox_partial_likelihood(beta, X, time, event):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ –ö–æ–∫—Å–∞ –∑ —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—î—é"""
    n = len(time)
    log_likelihood = 0

    linear_predictor = X @ beta

    for i in range(n):
        if event[i] == 1:
            risk_set = time >= time[i]

            if np.sum(risk_set) > 0:
                numerator = linear_predictor[i]
                denominator = np.log(np.sum(np.exp(linear_predictor[risk_set])))
                log_likelihood += numerator - denominator

    # –î–æ–¥–∞—î–º–æ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
    regularization = 0.01 * np.sum(beta ** 2)

    return -log_likelihood + regularization


# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –º–æ–¥–µ–ª—ñ
variables = ['–≥–æ–¥–∏–Ω–∏_–Ω–∞–≤—á–∞–Ω–Ω—è', '–≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å', '–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', '–º–æ—Ç–∏–≤–∞—Ü—ñ—è', '–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–±–∞–ª', '–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–∫—É—Ä—Å—ñ–≤']
X = data[variables].values
time = data['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è'].values
event = data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'].values

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü—ñ—è
X_mean = X.mean(axis=0)
X_std = X.std(axis=0)
X_standardized = (X - X_mean) / X_std

# –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
initial_beta = np.zeros(len(variables))
result = minimize(cox_partial_likelihood, initial_beta,
                  args=(X_standardized, time, event),
                  method='L-BFGS-B', options={'maxiter': 2000, 'disp': True})

if result.success:
    beta_estimated = result.x
    print("‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
    print(f"–§—ñ–Ω–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞–≤–¥–æ–ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ: {-result.fun:.4f}")
else:
    print("‚ö† –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–µ –∑—ñ–π—à–ª–∞—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    beta_estimated = initial_beta

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
hazard_ratios = np.exp(beta_estimated)
standard_errors = np.sqrt(np.diag(result.hess_inv.todense())) if hasattr(result.hess_inv, 'todense') else np.ones_like(
    beta_estimated) * 0.1
z_scores = beta_estimated / standard_errors
p_values = 2 * (1 - norm.cdf(np.abs(z_scores)))
conf_int_lower = np.exp(beta_estimated - 1.96 * standard_errors)
conf_int_upper = np.exp(beta_estimated + 1.96 * standard_errors)

# 4. –î–ï–¢–ê–õ–¨–ù–ê –¢–ê–ë–õ–ò–¶–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í
print("\n" + "=" * 80)
print("4. –î–ï–¢–ê–õ–¨–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –†–ï–ì–†–ï–°–Ü–á –ö–û–ö–°–ê")
print("=" * 80)

results_table = pd.DataFrame({
    '–ó–º—ñ–Ω–Ω–∞': variables,
    '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç (Œ≤)': beta_estimated,
    '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø–æ–º–∏–ª–∫–∞': standard_errors,
    'z-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': z_scores,
    'p-–∑–Ω–∞—á–µ–Ω–Ω—è': p_values,
    'Hazard Ratio': hazard_ratios,
    '95% CI –Ω–∏–∂–Ω—è': conf_int_lower,
    '95% CI –≤–µ—Ä—Ö–Ω—è': conf_int_upper,
    '–ó–Ω–∞—á–∏–º—ñ—Å—Ç—å': ['***' if p < 0.001 else '**' if p < 0.01 else '*' if p < 0.05 else '–Ω–µ –∑–Ω–∞—á.' for p in p_values]
})

print("\nüìã –î–ï–¢–ê–õ–¨–ù–ê –¢–ê–ë–õ–ò–¶–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í:")
print("-" * 100)
print(results_table.round(4).to_string(index=False))

# 5. –†–û–ó–®–ò–†–ï–ù–ê –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø
print("\n" + "=" * 80)
print("5. –ö–û–ú–ü–õ–ï–ö–°–ù–ê –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í")
print("=" * 80)

fig = plt.figure(figsize=(20, 16))

# –ì—Ä–∞—Ñ—ñ–∫ 1: Hazard Ratios –∑ –¥–æ–≤—ñ—Ä—á–∏–º–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
ax1 = plt.subplot(3, 2, 1)
y_pos = np.arange(len(variables))
colors = ['green' if hr < 1 else 'red' for hr in hazard_ratios]

ax1.barh(y_pos, hazard_ratios, xerr=[hazard_ratios - conf_int_lower, conf_int_upper - hazard_ratios],
         color=colors, alpha=0.7, capsize=5, error_kw={'capsize': 5, 'capthick': 2})
ax1.axvline(x=1, color='black', linestyle='--', linewidth=2, alpha=0.7)
ax1.set_yticks(y_pos)
ax1.set_yticklabels([f'{var}\n({sig})' for var, sig in zip(variables, results_table['–ó–Ω–∞—á–∏–º—ñ—Å—Ç—å'])])
ax1.set_xlabel('Hazard Ratio (exp(Œ≤))')
ax1.set_title('HAZARD RATIOS –ó –î–û–í–Ü–†–ß–ò–ú–ò –Ü–ù–¢–ï–†–í–ê–õ–ê–ú–ò\n(95% –¥–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª)', fontsize=14, fontweight='bold')
ax1.grid(axis='x', alpha=0.3)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
for i, (hr, lower, upper) in enumerate(zip(hazard_ratios, conf_int_lower, conf_int_upper)):
    ax1.text(hr + 0.05, i, f'{hr:.3f}\n[{lower:.3f}-{upper:.3f}]',
             va='center', fontsize=9, fontweight='bold')

# –ì—Ä–∞—Ñ—ñ–∫ 2: –í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–Ω–∏—Ö
ax2 = plt.subplot(3, 2, 2)
importance = np.abs(beta_estimated) / np.sum(np.abs(beta_estimated)) * 100
colors_imp = plt.cm.viridis(importance / 100)

bars = ax2.barh(variables, importance, color=colors_imp)
ax2.set_xlabel('–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å (%)')
ax2.set_title('–í–Ü–î–ù–û–°–ù–ê –í–ê–ñ–õ–ò–í–Ü–°–¢–¨ –ó–ú–Ü–ù–ù–ò–•', fontsize=14, fontweight='bold')
ax2.grid(axis='x', alpha=0.3)

for bar, imp in zip(bars, importance):
    ax2.text(bar.get_width() + 1, bar.get_y() + bar.get_height() / 2,
             f'{imp:.1f}%', va='center', fontweight='bold')

# –ì—Ä–∞—Ñ—ñ–∫ 3: –ö—Ä–∏–≤—ñ –≤–∏–∂–∏–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤
ax3 = plt.subplot(3, 2, 3)


def predict_survival_curve(beta, X_profile, times):
    """–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∫—Ä–∏–≤–æ—ó –≤–∏–∂–∏–≤–∞–Ω–Ω—è"""
    linear_predictor = X_profile @ beta
    baseline_hazard = 0.001  # –°–ø—Ä–æ—â–µ–Ω–∞ –±–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–∏–∑–∏–∫—É
    survival_probs = np.exp(-baseline_hazard * times * np.exp(linear_predictor))
    return survival_probs


# –ü—Ä–æ—Ñ—ñ–ª—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
times = np.linspace(0, 500, 100)
profiles = {
    '–í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫': [8, 60, 4, 5, 65, 7],
    '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∏–∑–∏–∫': [12, 75, 6, 7, 72, 5],
    '–ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫': [18, 90, 8, 9, 85, 4]
}

for profile_name, profile_values in profiles.items():
    profile_std = (np.array(profile_values) - X_mean) / X_std
    survival_probs = predict_survival_curve(beta_estimated, profile_std, times)
    ax3.plot(times, survival_probs, label=profile_name, linewidth=2.5)

ax3.set_xlabel('–ß–∞—Å (–¥–Ω—ñ)')
ax3.set_ylabel('–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–≤—á–∞–Ω–Ω—è')
ax3.set_title('–ü–†–û–ì–ù–û–ó–û–í–ê–ù–Ü –ö–†–ò–í–Ü –í–ò–ñ–ò–í–ê–ù–ù–Ø\n–¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤', fontsize=14, fontweight='bold')
ax3.legend()
ax3.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ—ñ–∫ 4: –†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –¥–æ –ø–æ–¥—ñ—ó
ax4 = plt.subplot(3, 2, 4)

event_times = data[data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'] == 1]['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è']
censored_times = data[data['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'] == 0]['—á–∞—Å_–Ω–∞–≤—á–∞–Ω–Ω—è']

ax4.hist(event_times, bins=30, alpha=0.7, label='–í—ñ–¥—Å—ñ—á–µ–Ω–Ω—è', color='red', density=True)
ax4.hist(censored_times, bins=30, alpha=0.7, label='–¶–µ–Ω–∑—É—Ä–æ–≤–∞–Ω—ñ', color='blue', density=True)
ax4.set_xlabel('–ß–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è (–¥–Ω—ñ)')
ax4.set_ylabel('–©—ñ–ª—å–Ω—ñ—Å—Ç—å –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ')
ax4.set_title('–†–û–ó–ü–û–î–Ü–õ –ß–ê–°–£ –î–û –ü–û–î–Ü–á', fontsize=14, fontweight='bold')
ax4.legend()
ax4.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ—ñ–∫ 5: –ê–Ω–∞–ª—ñ–∑ –∑–∞–ª–∏—à–∫—ñ–≤
ax5 = plt.subplot(3, 2, 5)

predicted_risk = X_standardized @ beta_estimated
martingale_residuals = event - np.cumsum(event) * np.exp(predicted_risk) / np.sum(np.exp(predicted_risk))

ax5.scatter(predicted_risk, martingale_residuals, alpha=0.6, color='purple')
ax5.axhline(y=0, color='red', linestyle='--', linewidth=2)
ax5.set_xlabel('–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π —Ä–∏–∑–∏–∫')
ax5.set_ylabel('–ú–∞—Ä—Ç–∏–Ω–≥–∞–ª—å–Ω—ñ –∑–∞–ª–∏—à–∫–∏')
ax5.set_title('–ê–ù–ê–õ–Ü–ó –ó–ê–õ–ò–®–ö–Ü–í', fontsize=14, fontweight='bold')
ax5.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ—ñ–∫ 6: –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ —Ä–∏–∑–∏–∫–æ–º
ax6 = plt.subplot(3, 2, 6)

risk_groups = pd.qcut(predicted_risk, 4, labels=['–î—É–∂–µ –Ω–∏–∑—å–∫–∏–π', '–ù–∏–∑—å–∫–∏–π', '–í–∏—Å–æ–∫–∏–π', '–î—É–∂–µ –≤–∏—Å–æ–∫–∏–π'])
actual_risk_by_group = data.groupby(risk_groups)['–≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è'].mean() * 100

colors_risk = ['green', 'lightgreen', 'orange', 'red']
bars = ax6.bar(actual_risk_by_group.index, actual_risk_by_group.values, color=colors_risk, alpha=0.7)

ax6.set_xlabel('–ì—Ä—É–ø–∞ —Ä–∏–∑–∏–∫—É')
ax6.set_ylabel('–§–∞–∫—Ç–∏—á–Ω–∏–π —Ä–∏–∑–∏–∫ –≤—ñ–¥—Å—ñ—á–µ–Ω–Ω—è (%)')
ax6.set_title('–ü–ï–†–ï–í–Ü–†–ö–ê –ö–ê–õ–Ü–ë–†–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–Ü', fontsize=14, fontweight='bold')
ax6.grid(True, alpha=0.3)

for bar, value in zip(bars, actual_risk_by_group.values):
    height = bar.get_height()
    ax6.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{value:.1f}%',
             ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# 6. –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø –¢–ê –í–ò–°–ù–û–í–ö–ò
print("\n" + "=" * 80)
print("6. –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø –¢–ê –ü–†–ê–ö–¢–ò–ß–ù–Ü –í–ò–°–ù–û–í–ö–ò")
print("=" * 80)

print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–¢–ï–†–ü–†–ï–¢–ê–¶–Ü–Ø –í–ü–õ–ò–í–£ –ö–û–ñ–ù–û–á –ó–ú–Ü–ù–ù–û–á:")
print("-" * 70)

for i, variable in enumerate(variables):
    hr = hazard_ratios[i]
    p_val = p_values[i]

    if p_val < 0.05:
        if hr < 1:
            risk_reduction = (1 - hr) * 100
            print(f"\n‚úÖ {variable.upper():25} HR = {hr:.3f} ({results_table['–ó–Ω–∞—á–∏–º—ñ—Å—Ç—å'].iloc[i]})")
            print(f"   üìâ –ó–ê–•–ò–°–ù–ò–ô –§–ê–ö–¢–û–†: –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–∏–∑–∏–∫—É –Ω–∞ {risk_reduction:.1f}%")
            print(f"   üìä –ü—Ä–∏ –∑–±—ñ–ª—å—à–µ–Ω–Ω—ñ –Ω–∞ 1 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")
        else:
            risk_increase = (hr - 1) * 100
            print(f"\n‚ö†Ô∏è {variable.upper():25} HR = {hr:.3f} ({results_table['–ó–Ω–∞—á–∏–º—ñ—Å—Ç—å'].iloc[i]})")
            print(f"   üìà –§–ê–ö–¢–û–† –†–ò–ó–ò–ö–£: –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–∏–∑–∏–∫—É –Ω–∞ {risk_increase:.1f}%")
            print(f"   üìä –ü—Ä–∏ –∑–±—ñ–ª—å—à–µ–Ω–Ω—ñ –Ω–∞ 1 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")
    else:
        print(f"\nüî∂ {variable.upper():25} HR = {hr:.3f} (–Ω–µ –∑–Ω–∞—á.)")
        print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–æ –Ω–µ –∑–Ω–∞—á–∏–º–∏–π –≤–ø–ª–∏–≤")

# 7. –ü–†–ê–ö–¢–ò–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
print("\n" + "=" * 80)
print("7. –ü–†–ê–ö–¢–ò–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –û–°–í–Ü–¢–ù–¨–û–ì–û –ü–†–û–¶–ï–°–£")
print("=" * 80)

print("\nüéØ –ü–†–û–ì–†–ê–ú–ê –ú–Ü–ù–Ü–ú–Ü–ó–ê–¶–Ü–á –†–ò–ó–ò–ö–£ –í–Ü–î–°–Ü–ß–ï–ù–ù–Ø:")

recommendations = [
    ("–ü–Ü–î–í–ò–©–ï–ù–ù–Ø –ß–ê–°–£ –ù–ê–í–ß–ê–ù–ù–Ø", "–†–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ 15+ –≥–æ–¥–∏–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "–í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
    ("–ü–û–õ–Ü–ü–®–ï–ù–ù–Ø –í–Ü–î–í–Ü–î–£–í–ê–ù–ù–Ø", "–¶—ñ–ª—å - 85%+ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å", "–í–∏—Å–æ–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
    ("–†–û–ó–í–ò–¢–û–ö –ê–ö–¢–ò–í–ù–û–°–¢–Ü", "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫—É—Ä—Å–∏, –≥—É—Ä—Ç–∫–∏", "–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
    ("–ü–Ü–î–í–ò–©–ï–ù–ù–Ø –ú–û–¢–ò–í–ê–¶–Ü–á", "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ", "–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
    ("–û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø", "–ë–∞–ª–∞–Ω—Å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—É—Ä—Å—ñ–≤", "–ù–∏–∑—å–∫–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç")
]

for i, (area, action, priority) in enumerate(recommendations, 1):
    print(f"{i}. {area}:")
    print(f"   üéØ –î—ñ—è: {action}")
    print(f"   ‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority}")

# 8. –û–¶–Ü–ù–ö–ê –Ø–ö–û–°–¢–Ü –ú–û–î–ï–õ–Ü
print("\n" + "=" * 80)
print("8. –ö–û–ú–ü–õ–ï–ö–°–ù–ê –û–¶–Ü–ù–ö–ê –Ø–ö–û–°–¢–Ü –ú–û–î–ï–õ–Ü")
print("=" * 80)

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ C-index (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
concordant_pairs = 0
total_pairs = 0

for i in range(len(time)):
    for j in range(i + 1, len(time)):
        if event[i] == 1 or event[j] == 1:
            if (time[i] < time[j] and event[i] == 1 and predicted_risk[i] > predicted_risk[j]) or \
                    (time[j] < time[i] and event[j] == 1 and predicted_risk[j] > predicted_risk[i]):
                concordant_pairs += 1
            total_pairs += 1

c_index = concordant_pairs / total_pairs if total_pairs > 0 else 0.5

print(f"\nüìä –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü –ú–û–î–ï–õ–Ü:")
print(f"   ‚Ä¢ –Ü–Ω–¥–µ–∫—Å –∫–æ–Ω–∫–æ—Ä–¥–∞–Ω—Å—ñ—ó (C-index): {c_index:.3f}")
print(f"   ‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–∏–º–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö: {sum(p_values < 0.05)} –∑ {len(variables)}")
print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ: {'–í–Ü–î–ú–Ü–ù–ù–ê' if c_index > 0.75 else '–î–û–ë–†–ê' if c_index > 0.65 else '–ó–ê–î–û–í–Ü–õ–¨–ù–ê'}")
print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: {'–í–ò–°–û–ö–ê' if c_index > 0.7 else '–°–ï–†–ï–î–ù–Ø' if c_index > 0.6 else '–ù–ò–ó–¨–ö–ê'}")

print(f"\nüìà –ó–ê–ì–ê–õ–¨–ù–Ü –í–ò–°–ù–û–í–ö–ò:")
print(
    f"   ‚Ä¢ –ù–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ –∑–∞—Ö–∏—Å–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏: {variables[np.argmin(hazard_ratios)]}, {variables[np.argsort(hazard_ratios)[1]]}")
print(f"   ‚Ä¢ –ù–∞–π–±—ñ–ª—å—à–∏–π –≤–ø–ª–∏–≤ –Ω–∞ —Ä–∏–∑–∏–∫: –∑–º—ñ–Ω–∞ —á–∞—Å—É –Ω–∞–≤—á–∞–Ω–Ω—è (¬±1œÉ = {abs((hazard_ratios[0] - 1) * 100):.1f}% —Ä–∏–∑–∏–∫—É)")
print(f"   ‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—Ç—Ä—É—á–∞–Ω—å: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á–æ–≤–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –º–æ–∂–µ –∑–Ω–∏–∑–∏—Ç–∏ —Ä–∏–∑–∏–∫ –Ω–∞ 40-60%")

print(f"\n{'=' * 80}")
print("üéì –ê–ù–ê–õ–Ü–ó –£–°–ü–Ü–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
print(f"{'=' * 80}")
